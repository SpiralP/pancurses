initSidebarItems({"constant":[["ALL_MOUSE_EVENTS",""],["A_ALTCHARSET",""],["A_ATTRIBUTES",""],["A_BLINK",""],["A_BOLD",""],["A_CHARTEXT",""],["A_COLOR",""],["A_DIM",""],["A_INVIS",""],["A_ITALIC",""],["A_LEFTLINE",""],["A_NORMAL",""],["A_OVERLINE",""],["A_REVERSE",""],["A_RIGHTLINE",""],["A_STANDOUT",""],["A_STRIKEOUT",""],["A_UNDERLINE",""],["BUTTON1_CLICKED",""],["BUTTON1_DOUBLE_CLICKED",""],["BUTTON1_PRESSED",""],["BUTTON1_RELEASED",""],["BUTTON1_TRIPLE_CLICKED",""],["BUTTON2_CLICKED",""],["BUTTON2_DOUBLE_CLICKED",""],["BUTTON2_PRESSED",""],["BUTTON2_RELEASED",""],["BUTTON2_TRIPLE_CLICKED",""],["BUTTON3_CLICKED",""],["BUTTON3_DOUBLE_CLICKED",""],["BUTTON3_PRESSED",""],["BUTTON3_RELEASED",""],["BUTTON3_TRIPLE_CLICKED",""],["BUTTON4_CLICKED",""],["BUTTON4_DOUBLE_CLICKED",""],["BUTTON4_PRESSED",""],["BUTTON4_RELEASED",""],["BUTTON4_TRIPLE_CLICKED",""],["BUTTON5_CLICKED",""],["BUTTON5_DOUBLE_CLICKED",""],["BUTTON5_PRESSED",""],["BUTTON5_RELEASED",""],["BUTTON5_TRIPLE_CLICKED",""],["BUTTON_ALT",""],["BUTTON_CTRL",""],["BUTTON_SHIFT",""],["COLOR_BLACK",""],["COLOR_BLUE",""],["COLOR_CYAN",""],["COLOR_GREEN",""],["COLOR_MAGENTA",""],["COLOR_RED",""],["COLOR_WHITE",""],["COLOR_YELLOW",""],["ERR",""],["KEY_EVENT",""],["KEY_F15",""],["KEY_OFFSET",""],["KEY_RESIZE",""],["OK",""],["REPORT_MOUSE_POSITION",""],["SPECIAL_KEY_CODES",""]],"enum":[["Attribute",""],["Input",""]],"fn":[["ACS_BBSS",""],["ACS_BLOCK",""],["ACS_BOARD",""],["ACS_BSBS",""],["ACS_BSSB",""],["ACS_BSSS",""],["ACS_BTEE",""],["ACS_BULLET",""],["ACS_CKBOARD",""],["ACS_DARROW",""],["ACS_DEGREE",""],["ACS_DIAMOND",""],["ACS_GEQUAL",""],["ACS_HLINE",""],["ACS_LANTERN",""],["ACS_LARROW",""],["ACS_LEQUAL",""],["ACS_LLCORNER",""],["ACS_LRCORNER",""],["ACS_LTEE",""],["ACS_NEQUAL",""],["ACS_PI",""],["ACS_PLMINUS",""],["ACS_PLUS",""],["ACS_RARROW",""],["ACS_RTEE",""],["ACS_S1",""],["ACS_S3",""],["ACS_S7",""],["ACS_S9",""],["ACS_SBBS",""],["ACS_SBSB",""],["ACS_SBSS",""],["ACS_SSBB",""],["ACS_SSBS",""],["ACS_SSSB",""],["ACS_SSSS",""],["ACS_STERLING",""],["ACS_TTEE",""],["ACS_UARROW",""],["ACS_ULCORNER",""],["ACS_URCORNER",""],["ACS_VLINE",""],["COLORS","Maximum number of colors the terminal is capable of displaying."],["COLOR_PAIR",""],["COLOR_PAIRS","Maximum number of color-pairs the terminal is capable of displaying."],["baudrate","Return the output speed of the terminal. On Windows it simply returns `INT_MAX`"],["beep","Sounds the audible bell on the terminal, if possible; if not, it calls flash()."],["can_change_color","Indicates if the terminal has the capability to change the definition of its colors."],["cbreak","Set cbreak mode."],["color_content","This routine gives programmers a way to find the intensity of the red, green, and blue (RGB) components in a color. It takes the color number as an argument and returns three values that tell you the amounts of red, green, and blue components in the given color. The argument must be a legal color value, i.e., 0 through COLORS()-1, inclusive. The values that are returned are in the range 0 (no component) through 1000 (maximum amount of component), inclusive."],["curs_set","Alters the appearance of the cursor."],["def_prog_mode","Save the current terminal modes as the \"program\" (in curses) state for use by the `reset_prog_mode()` and `reset_shell_mode()` functions.  This is done automatically by initscr()."],["def_shell_mode","Save the current terminal modes as the \"shell\" (not in curses) state for use by the `reset_prog_mode()` and `reset_shell_mode()` functions.  This is done automatically by initscr()."],["delay_output","Inserts an 'milliseconds' millisecond pause in output. This routine should not be used extensively because padding characters are used rather than a CPU pause. If no padding character is specified, this uses napms to perform the delay."],["delscreen","Frees storage associated with the SCREEN data structure."],["doupdate","Compares the virtual screen to the physical screen and performs an update of the physical screen."],["echo","Enabled echoing typed characters."],["endwin","Should be called before exiting or escaping from curses mode temporarily."],["flash","Flashes the screen, if possible; if not, it calls beep()."],["flushinp","Throws away any type-ahead that has been typed by the user and has not yet been read by the program."],["getmouse","Returns the current mouse status in an MEVENT struct."],["half_delay","Similar to cbreak(), but allows for a time limit to be specified, in tenths of a second."],["has_colors","Indicates if the terminal supports, and can maniplulate color."],["init_color","Changes the definition of a color. It takes four arguments: the number of the color to be changed followed by three RGB values (for the amounts of red, green, and blue components). The first argument must be a legal color value; default colors are not allowed here. Each of the last three arguments must be a value in the range 0 through 1000. When `init_color` is used, all occurrences of that color on the screen immediately change to the new definition."],["init_pair","Changes the definition of a color-pair."],["initscr","Initialize the curses system, this must be the first function that is called."],["keyname","Returns a character string corresponding to the key `code`."],["mouseinterval","Sets the timeout for a mouse click."],["mousemask","Set the mouse events to be reported."],["napms","Suspends the program for the specified number of milliseconds."],["newterm","A program that outputs to more than one terminal should use the newterm routine for each terminal instead of initscr."],["newwin","Creates a new window with the given number of lines, nlines and columns, ncols."],["nl","Enables the translation of a carriage return into a newline on input."],["nocbreak","Set nocbreak mode."],["noecho","Disables echoing typed characters."],["nonl","Disables the translation of a carriage return into a newline on input."],["noraw","Disable raw mode."],["raw","Enable raw mode."],["reset_prog_mode","Restore the terminal to \"program\" (in curses) state. This is done automatically by endwin() and doupdate() after an endwin(), so this would normally not be called before."],["reset_shell_mode","Restore the terminal to \"shell\" (not in curses) state. This is done automatically by endwin() and doupdate() after an endwin(), so this would normally not be called before."],["resize_term","Attempts to resize the screen to the given size."],["set_blink","Toggles whether the `A_BLINK` attribute sets an actual blink mode (TRUE), or sets the background color to high intensity (FALSE)."],["set_term","Switches between different terminals."],["set_title","Sets the title of the window in which the curses program is running. This function may not do anything on some platforms. (Only supported on Windows)"],["start_color","Initializes eight basic colors (black, red, green, yellow, blue, magenta, cyan, and white), and two global variables accessed through `COLORS()` and `COLOR_PAIRS()` (respectively defining the maximum number of colors and color-pairs the terminal is capable of displaying)."],["use_default_colors","Allows the use of -1 as a foreground or background color with `init_pair()`."]],"mod":[["colorpair",""]],"struct":[["Attributes",""],["MEVENT",""],["Window",""]],"trait":[["ToChtype",""]],"type":[["SCREEN",""],["chtype",""],["mmask_t",""]]});